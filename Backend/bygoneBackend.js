/* 
    Bygone Backend 
        a basic web service backend library
    
    by Niko Norwood 07/04/2024
    last updated 03/31/2025 - NN

*/

var debugMode = true;
var logMode = true;
const { debug } = require('console');
const fs = require('fs');
const path = require("path");



//get formatted datetime (stole this from Hangerlog)
function getTime(){
    const now = new Date(Date.now());
    const formattedDateTime = now.toISOString().slice(0, 19).replace('T', ' ');  
    return formattedDateTime;
}  


//This pair of functions is an easy way to cleanup and standardize output
function output(message) {
    console.log(getTime() + "> " + message);
    if (logMode){logger.add(getTime() + "> " + message);}
}

function debugOutput(message) {
    if (debugMode){
            output("DEBUG: " + message);
    }
}

function setDebug(bool){
    if (typeof bool == "boolean"){
        debugMode = bool;
        debugOutput("Debug mode set to "+debugMode);
    } else {
        output("ERROR: attempted to set debug to non boolean value. Defaulting to "+debugMode);
    }
}


//This class and its functions are for logging output to the serverLog.txt
class Logger {
    constructor(filePath, flushInterval = 1000) {
        this.filePath = filePath;
        this.flushInterval = flushInterval;
        this.logQueue = [];
        this.timer = setInterval(() => this.flushQueue(), this.flushInterval);

        if(!fs.existsSync(filePath)){
            console.log("ERROR : Log file " + filePath + " does not exist. Attempting to create...");
            fs.writeFileSync(filePath , ("Log file generated by bygone - "+getTime()));
        }
    }

    add(message) {
        this.logQueue.push(message);
    }

    flushQueue() {
        if (this.logQueue.length === 0) return;

        const messages = this.logQueue.join('\n') + '\n';
        fs.appendFile(this.filePath, messages, (err) => {
        if (err) {module.exports = [startBygone(), output(), debugOutput()];
            logMode=false;
            console.error('Error writing to log file:', err);
        } else {
            this.logQueue = [];
        }
        });
    }

    close() {
        clearInterval(this.timer);
        this.flushQueue();
    }
}  



//Brain is dead... no description
class cachedFile {
    constructor (filePath) {
        this.filePath = filePath;

        if(fs.existsSync(filePath)){
            this.updateCache()
            output("Cached file "+filePath+" loaded")
        } else {
            output("ERROR : database file " + filePath + " does not exist. Attempting to create...");
            this.updateFile()
        }
    }

    updateFile(){
        try {
            // Convert the fileCache object to a JSON string
            const data = JSON.stringify(this.cache, null, 2);
            
            // Write the JSON string to the database.json file
            fs.writeFileSync(this.filePath, data);
            
            debugOutput('Database file updated successfully!');
        } catch (err) {
            output('ERROR: Error thrown Writing to database file : ' , err);
            throw('ERROR: Error thrown Writing to database file : ' , err);
        }
    }

    updateCache(){
        return new Promise ((resolve,reject) => {
            // Read the contents of the database.json file
            fs.readFile(this.filePath, (err, data) => {
                if (err) {
                    // If there's an error reading the file, send an error response
                    output("ERROR: unable to reead file");
                    reject("Error reading file:", err);
                } else {
                    try {
                        // Parse the data as JSON
                        const jsonData = JSON.parse(data);
    
                        this.cache = jsonData;
    
                        resolve(jsonData);
    
                    } catch (parseError) {
                        // If there's an error parsing the JSON, send an error response
                        reject("Error parsing JSON:", parseError);
                        output("ERROR: unable to reead file");
                    }
                }
            })
        })
    }
}

console.log("Starting Bygone services... ");

let logFilePath  = path.join(__dirname, "log.txt")
logger = new Logger(logFilePath, 2000); //Filepath, flush interval


r:
module.exports = {output: output, debugOutput: debugOutput, cachedFile: cachedFile, setDebug: setDebug};
